<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[python的Web开发之Django框架应用]]></title>
      <url>http://hanxiaoluo.site/2016/10/08/python%E7%9A%84Web%E5%BC%80%E5%8F%91%E4%B9%8BDjango%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1、安装python"><a href="#1、安装python" class="headerlink" title="1、安装python"></a>1、安装python</h1><p>　　在官网下载python进行安装，在此不做说明。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="2、安装Django"><a href="#2、安装Django" class="headerlink" title="2、安装Django"></a>2、安装Django</h1><p>　　下载 Django 压缩包，解压并和Python安装目录放在同一个根目录，进入 Django 目录，执行<strong>python setup.py install</strong>，然后开始安装，Django将要被安装到Python的Lib下site-packages。<br>　　安装的过程中可能会出现“ImportError: No module named setuptools”的错误提示，这是新手很常遇见的错误提示。不用担心，这是因为Windows环境下Python默认是没有安装setuptools这个模块的。<br>　　现在<strong><a href="http://pypi.python.org/pypi/setuptools" target="_blank" rel="external">http://pypi.python.org/pypi/setuptools</a></strong>上面貌似没有提供exe下载了，取而代之的是一个自动化下载安装的脚本<strong><a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">https://bootstrap.pypa.io/ez_setup.py</a></strong>，下载该脚本后运行<strong>python ez_setup.py</strong>即可。脚本会自动判断python的版本，自动下载，安装。
　　</p>
<h1 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h1><p>　　将这几个目录添加到系统环境变量中： D:\Python27\Lib\site-packages\Django-1.11-py2.7.egg\django\bin;D:\Python27\Scripts。 添加完成后就可以正常使用Django了。输入以下命令进行检查，验证是否安装成功。如果输出正确的版本号，则说明安装成功。<br>    python<br>    import django<br>    django.get_version()</p>
<h1 id="4、创建web项目"><a href="#4、创建web项目" class="headerlink" title="4、创建web项目"></a>4、创建web项目</h1><p>　　在我们的python目录下，通过命令行创建项目。比如我的目录F://mypython，在命令行输入<strong>django-admin.py startproject mydjangopro</strong>创建项目。
　　</p>
<h1 id="5、生成Django应用"><a href="#5、生成Django应用" class="headerlink" title="5、生成Django应用"></a>5、生成Django应用</h1><p>　　切换到mydjangopro目录，在命令行输入<strong>manage.py startapp sayhello</strong>生成django应用。
　　</p>
<h1 id="6、运行web服务器"><a href="#6、运行web服务器" class="headerlink" title="6、运行web服务器"></a>6、运行web服务器</h1><p>　　切换到mydjangopro目录，在命令行输入<strong>manage.py runserver</strong>启动内置服务器。<strong>注意：虽然 django 自带的这个 web 服务器对于开发很方便，但是，千万不要在正式的应用布署环境中使用它。 在同一时间，该服务器只能可靠地处理一次单个请求，并且没有进行任何类型的安全审计。</strong></p>
<h1 id="7、浏览器访问"><a href="#7、浏览器访问" class="headerlink" title="7、浏览器访问"></a>7、浏览器访问</h1><p>　　现在用网页浏览器访问，地址栏输入<strong><a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a></strong>，连接此web服务器，可以显示django项目的初始化页面。如下图所示：<br>　　<img src="http://odsh9s4s2.bkt.clouddn.com/django%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2.png" alt="django欢迎界面"></p>
<p>　　</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python图形用户界面之pyqt的使用]]></title>
      <url>http://hanxiaoluo.site/2016/10/08/python%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E4%B9%8Bpyqt4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1、安装pyqt（事先必须先完成python的安装）"><a href="#1、安装pyqt（事先必须先完成python的安装）" class="headerlink" title="1、安装pyqt（事先必须先完成python的安装）"></a>1、安装pyqt（事先必须先完成python的安装）</h1><p>　　我们可以在如下网址： <a href="http://www.riverbankcomputing.co.uk/software/pyqt/download" target="_blank" rel="external">http://www.riverbankcomputing.co.uk/software/pyqt/download</a><br>这里获取pyqt的下载，请选择正确的python版本和操作系统位数。需要注意的是，安装PyQt并不需要一些文章中提到的先安装sip和Qt的过程，因为在安装文件中已经包括。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>　　对于windows系统来说，只需要下载exe格式的文件即可。在这个exe格式的文件中，已经包含了如下模块：</p>
<ul>
<li>pyqt</li>
<li>Qt</li>
<li>Qt Designer</li>
<li>Qt Linguist</li>
<li>Qt Assistant</li>
<li>pyuic4(转换由设计师生成的.ui文件到.py)</li>
<li>pylupdate4</li>
<li>lrelease</li>
<li>pyrcc4</li>
<li>QScintilla(C++编辑器类Scintilla在QT环境下的移植版本)</li>
</ul>
<p>　一路点击next进行安装，直到路径选择界面，如下图所示。</p>
<p>  <img src="http://odsh9s4s2.bkt.clouddn.com/pyqt%E5%AE%89%E8%A3%85.png" alt="配置git路径"><br>　一定要注意，<strong>这里的路径指的是python的安装路径</strong>，填写正确路径，点击“Install”按钮进行安装即可。</p>
<h1 id="2、命令测试"><a href="#2、命令测试" class="headerlink" title="2、命令测试"></a>2、命令测试</h1><p>　　进入python自带的GUI工具-IDLE，输入import PyQt4，如果没有提示错误，则安装正确。</p>
<h1 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h1><p>创建文件pyqt.py内容如下：</p>
<pre><code># -*- coding: utf-8 -*-　　　　　
from PyQt4.QtGui import (QMainWindow, QPushButton, QApplication, 
                                 QVBoxLayout, QWidget)
from PyQt4.QtCore import (Qt, QObject, SIGNAL)
import anotherWindow
import sys
class OneWindow(QMainWindow):
    def __init__(self):
        super(OneWindow, self).__init__()
        self.setGeometry(100, 100, 600, 400)
        vLayout = QVBoxLayout()
        self.button = QPushButton(&quot;OK&quot;)
        vLayout.addWidget(self.button)
        widget = QWidget()
        widget.setLayout(vLayout)
        self.setCentralWidget(widget)
        QObject.connect(self.button,SIGNAL(&quot;clicked()&quot;) , self.anotherWindow)        
    def anotherWindow(self):
        print &apos;OK&apos;
        self.another = anotherWindow.AnotherWindow()
        self.another.show()                          
if __name__ == &apos;__main__&apos;:
    app = QApplication(sys.argv)
    w = OneWindow()
    w.show()     
    app.exec_()
</code></pre><p>创建文件anotherWindow.py内容如下：</p>
<pre><code># -*- coding: utf-8 -*-
from PyQt4.QtGui import (QMainWindow)
class AnotherWindow(QMainWindow):
    def __init__(self):
        super(AnotherWindow, self).__init__()
        self.resize(400, 300)
        self.setWindowTitle(&quot;this is another window&quot;)
</code></pre><p>　　两个文件主要实现通过点击按钮完成多界面切换。</p>
<h1 id="4、运行实例"><a href="#4、运行实例" class="headerlink" title="4、运行实例"></a>4、运行实例</h1><p>　　运行代码实例有多种方式，在此列举几种我自己常用方式。</p>
<p>　　（1）dos命令行运行。进入pyqt.py文件所在目录，比如我的目录F:\mypython,运行命令python pyqt.py即看到代码实现的窗体。</p>
<p>　　（2）python自带IDLE运行。打开IDLE环境，点击“File”菜单，选择”Open”菜单项，打开pyqt.py文件。此时会弹出另外一个窗体。点击“Run”菜单，选择“Run Module”菜单项，即可看到代码实现的窗体。</p>
<p>　　（3）利用PyCharm运行。点击”File”菜单，选择“New Project”建立“Pure Python”工程，选择工程目录及python.exe目录。在工程下新建”Python File”，分别创建pyqt.py文件及anotherWindow.py文件。运行工程后即可看到代码实现的窗体。</p>
<h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1><p>　　python拥有多种图形界面编程，因为我自己平时用qt比较多，所以选择了pyqt。查看pyqt中的qt帮助文档，发现与qt的帮助文档基本相同，没必要把时间浪费到API上。
　　</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用hexo在github上搭建个人博客]]></title>
      <url>http://hanxiaoluo.site/2016/09/20/%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h1><p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>　　node.js官网地址：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a><br>下载最新版的node.js进行逐步安装即可。</p>
<h1 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h1><p>　　下载git客户端，指定安装目录进行安装。以后所有的git命令都是在git-bash中进行。</p>
<h1 id="3、申请github账号"><a href="#3、申请github账号" class="headerlink" title="3、申请github账号"></a>3、申请github账号</h1><p>　　github官网地址：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a><br>输入账号、密码进行注册。</p>
<p>　　注册完成后，点击“New repository”创建新的仓库，注意个人主页的仓库名要与你的用户名相同。</p>
<p>　　至于SSH Keys，看你自己了，可以不配置，不配置的话以后每一次对自己的博客有改动提交的时候就要手动输入账号密码，配置后就不需要了。怎麽配置这里就不说了，网上很多教程。</p>
<h1 id="4、使用npm安装hexo"><a href="#4、使用npm安装hexo" class="headerlink" title="4、使用npm安装hexo"></a>4、使用npm安装hexo</h1><p>　　完成node.js和git的安装后，我们进行hexo的安装。首先创建一个本地文件夹，如myhexo，进入该目录，执行如下命令安装,命令：<strong>sudo npm install -g hexo</strong></p>
<p>　　完成后，执行如下命令进行初始化,命令：<strong>sudo hexo init</strong></p>
<p>　　至此hexo的安装工作全部完成，myhexo就是你的博客根目录，所有的博客操作都在里面进行。</p>
<p>　　生成静态页面至public目录的命令：<strong>sudo hexo generate</strong>(<em>hexo g</em> 也可以)</p>
<p>将.deploy目录部署到github的命令：<strong>sudo hexo deploy</strong>(<em>hexo d</em> 也可以)</p>
<p>　　开启预览访问端口的命令：<strong>sudo hexo server</strong>(<em>hexo s </em>也可以)，默认端口为<em>4000</em>，浏览器输入<a href="http://localhost:4000]" target="_blank" rel="external">http://localhost:4000</a>，即可看到我们的博客主页。</p>
<p>　　配置github，目的是使用自己的github账户访问，比如<strong><em><a href="http://hanxiaoluo.github.io" target="_blank" rel="external">http://hanxiaoluo.github.io</a></em></strong>,<br>   我的博客在myhexo目录中，该目录里面有一个叫做——config.yml的文件，我们需要修改此文件。翻到最后，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line"><span class="built_in">type</span>: git </div><div class="line">repo: git@github.com:hanxiaoluo/hanxiaoluo.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
<p>  然后执行以下命令：</p>
<p>  <strong>sudo npm install hexo-deployer-git –save</strong></p>
<p>  <strong>sudo hexo deploy</strong></p>
<p>  部署步骤：<br>  每次部署的步骤，可按以下三部来进行:</p>
<p>  <strong>sudo hexo clean</strong></p>
<p>  <strong>sudo hexo g</strong></p>
<p>  <strong>sudo hexo d</strong> </p>
<p>  至此，准备工作全部完成了。我们在浏览器输入<strong><em><a href="http://github.com/hanxiaoluo.github.io" target="_blank" rel="external">http://github.com/hanxiaoluo.github.io</a></em></strong><br>即可访问我的博客啦。此时博客的主题为默认主题。我们可以修改博客主题。</p>
<h1 id="5、绑定自己的域名"><a href="#5、绑定自己的域名" class="headerlink" title="5、绑定自己的域名"></a>5、绑定自己的域名</h1><p>　　要想将博客与我们的域名绑定，首先我们要拥有自己的域名。百度搜索阿里云，进入阿里云官网，申请域名。<strong>这里要注意一些域名是不能在国内备案的，比如我申请的.site域名，就不能在国内备案（其他能备案的域名我也没有备案过，据说比较麻烦）。</strong>所以我把博客部署到了github，当然如果你有境外服务器那更好。</p>
<p>　　申请好域名，就可以解析啦。添加下面两条记录，注意记录类型和主机记录，记录值填写github的IP地址。</p>
<p>  <img src="http://odsh9s4s2.bkt.clouddn.com/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="域名解析"></p>
<p>  可以通过<strong>ping <em><a href="http://hanxiaoluo.github.io" target="_blank" rel="external">http://hanxiaoluo.github.io</a></em></strong><br>  获得该IP地址。</p>
<p>　　到这里我们在浏览器输入域名去访问博客，会出现404错误。我们还差一个CNAME文件，这个文件需要我们提交到github仓库。文件的内容就是你的域名，比如我的：<em>www.hanxiaoluo.site</em> 提交完，我们再在浏览器输入域名，就可以直接访问我的博客啦。</p>
<h1 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h1><p>　　到此为止，我们已经完成整个博客在github上的搭建，同时实现了域名绑定。搭建过程中，建议大家多学习git及hexo命令的使用。这些在后面的文章中，我们都会提到。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git在qtcreator中的使用]]></title>
      <url>http://hanxiaoluo.site/2016/09/20/git%E5%9C%A8qtcreator%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h1><p>　　官网下载相应的git版本，安装即可。记下git.exe的路径，比如我的git路径为：<strong>D:\Git\Git\bin</strong></p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="2、在IDE中设置git路径"><a href="#2、在IDE中设置git路径" class="headerlink" title="2、在IDE中设置git路径"></a>2、在IDE中设置git路径</h1><p>　　双击qtcreator运行，依次点击<strong>工具-选项-版本控制-Git</strong>，弹出如下界面:</p>
<p><img src="http://odsh9s4s2.bkt.clouddn.com/qtcreatorgitset.png" alt="配置git路径"></p>
<p>　　在“附加在系统PATH之前”后面的编辑框填写第一步获取到的git路径。</p>
<h1 id="3、使用IDE新建工程"><a href="#3、使用IDE新建工程" class="headerlink" title="3、使用IDE新建工程"></a>3、使用IDE新建工程</h1><p>　　前面的建立过程此处不做详细介绍，与普通的qt工程建立相同。需要注意的是，工程建立最后一步，在“添加到版本控制系统”后面我们需要选中Git,然后点击“完成”即可。</p>
<h1 id="4、本地仓库绑定github"><a href="#4、本地仓库绑定github" class="headerlink" title="4、本地仓库绑定github"></a>4、本地仓库绑定github</h1><p>　　打开我们新建立的qt工程文件夹(即.pro文件所在文件夹)，鼠标右键点击，进入git命令行。执行如下命令：</p>
<p><strong>git remote add origin <a href="https://github.com/han/myqtCreator" target="_blank" rel="external">https://github.com/han/myqtCreator</a></strong></p>
<p>完成本地仓库与github远程仓库的绑定。</p>
<h1 id="5、建立分支"><a href="#5、建立分支" class="headerlink" title="5、建立分支"></a>5、建立分支</h1><p>　　由于在项目开发过程中，需要所有的开发人员团队合作，我们为每一个开发人员分配自己的分支，相应的我们需要建立自己的本地分支(相关git的知识可自行去学习)。在命令行下执行如下命令：</p>
<p><strong>git checkout -b gh-pages origin/gh-pages</strong></p>
<p>此时可能会出现牵出远程分支错误，如下：</p>
<p>fatal: Cannot update paths and switch to branch ‘develop’ at the same time.<br>Did you intend to checkout ‘origin/develop’ which can not be resolved as commit? </p>
<p>解决方法：</p>
<p><strong>git fetch</strong></p>
<p><strong>git checkout -b gh-pages origin/gh-pages</strong></p>
<h1 id="6、git上传"><a href="#6、git上传" class="headerlink" title="6、git上传"></a>6、git上传</h1><p>　　如前面文章所讲，依次执行如下命令：</p>
<p><strong>git add .</strong></p>
<p><strong>git commit -m “注释”</strong></p>
<p><strong>git push -u origin gh-pages</strong></p>
<p>可以看到本地分支上的源码已经上传到远程分支。</p>
<h1 id="7、qtcreator直接上传源码到github分支"><a href="#7、qtcreator直接上传源码到github分支" class="headerlink" title="7、qtcreator直接上传源码到github分支"></a>7、qtcreator直接上传源码到github分支</h1><p>　　我们对工程源码进行修改，比如添加打印信息：qDebug()&lt;&lt;”hello”;<br>修改完成，在菜单栏找到<strong>工具-Git-Local Repository -Commit</strong>，填写作者、邮箱、描述。右侧选中被修改的文件，点击“commit”按钮，完成提交。<br>　　我们此时观察到github远程仓库的代码已经更新，说明我们的源码修改已经被成功上传。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码管理之gitlab的使用]]></title>
      <url>http://hanxiaoluo.site/2016/09/19/gitlab%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h1><p>　　下载git客户端，指定目录进行安装。安装完毕，右键菜单，可以看到Git Bash Here 菜单项。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="2、建立远程分支"><a href="#2、建立远程分支" class="headerlink" title="2、建立远程分支"></a>2、建立远程分支</h1><p>　　输入用户名及密码，进入gitlab，在“你的项目”中可以看到我们要参与的项目。点击项目名称，可以看到项目信息。在页面上方，我们找到“仓库”，点击进入。此时就可以看到整个项目的源码。</p>
<p>　 点击项目名称右侧的“+”，点击“New branch”，建立我们自己的分支，比如我的为tao.zhang,建立完毕，在项目名称左侧的下拉菜单，可以看到我们的分支，选中tao.zhang分支，可以看到该分支下的源码。</p>
<p>　　此时tao.zhang分支下的内容与master分支下内容是一样的。</p>
<h1 id="3、建立本地仓库"><a href="#3、建立本地仓库" class="headerlink" title="3、建立本地仓库"></a>3、建立本地仓库</h1><p>　　在自己的电脑E盘，建立名字为mygitlab的文件夹，进入该文件夹，右键菜单，点击“Git Bash Here”，进入命令行。执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> http://gitlab服务器IP地址/project.admin/Gemini</div></pre></td></tr></table></figure>
<p>　　其中gitlab服务器IP地址根据自己的服务器IP地址而定。克隆下来默认为master分支，所以我们在文件夹里面看到的是master分支对应的内容。</p>
<h1 id="4、建立本地分支"><a href="#4、建立本地分支" class="headerlink" title="4、建立本地分支"></a>4、建立本地分支</h1><p>　　在命令行下输入<strong>cd Gemini</strong>进入Gemini文件夹下，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b tao.zhang origin/tao.zhang</div></pre></td></tr></table></figure>
<p>我们此时观察本地Gemini文件夹下的内容，对应的才是我们远程分支下的内容。</p>
<h1 id="5、上传到远程分支"><a href="#5、上传到远程分支" class="headerlink" title="5、上传到远程分支"></a>5、上传到远程分支</h1><p>　　进入命令行执行如下命令：</p>
<p><strong>git add .</strong>  //其中，git add .表示上传所有的文件，而git add 1.txt表示只上传文件1.txt</p>
<p><strong>git commit -m “注释”</strong> //其中，双引号之内的内容表示操作注释，方便代码管理。</p>
<p><strong>git push origin tao.zhang</strong> //该命令表示将内容真正上传到远程分支。</p>
<p>　　此时在远程分支，我们会看到我们上传的文件。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello]]></title>
      <url>http://hanxiaoluo.site/2016/09/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
</the>]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://hanxiaoluo.site/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
